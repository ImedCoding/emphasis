// Fichier: package.json
```json
{
  "name": "emphasis",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "prisma:migrate": "prisma migrate dev",
    "prisma:studio": "prisma studio"
  },
  "dependencies": {
    "next": "^13.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "next-auth": "^4.0.0",
    "@prisma/client": "^4.0.0",
    "qrcode": "^1.5.0"
  },
  "devDependencies": {
    "prisma": "^4.0.0",
    "eslint": "^8.0.0",
    "prettier": "^2.0.0"
  }
}
```

// Fichier: prisma/schema.prisma
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String?
  image       String?
  accounts    Account[]
  sessions    Session[]
  collections Collection[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Figurine {
  id          String        @id @default(uuid())
  name        String
  series      String
  imageRef    String
  collections Collection[]
}

model Collection {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  figurine     Figurine    @relation(fields: [figurineId], references: [id])
  figurineId   String
  qrCode       String
  proofPhotos  PhotoProof[]
  createdAt    DateTime    @default(now())
  @@unique([userId, figurineId])
}

model PhotoProof {
  id           String      @id @default(uuid())
  collection   Collection  @relation(fields: [collectionId], references: [id])
  collectionId String
  urlImage     String
  timestamp    DateTime    @default(now())
}
```

// Fichier: lib/prisma.js
```js
import { PrismaClient } from '@prisma/client';

let prisma;
if (process.env.NODE_ENV === 'production') {
  prisma = new PrismaClient();
} else {
  if (!global.prisma) {
    global.prisma = new PrismaClient();
  }
  prisma = global.prisma;
}
export default prisma;
```

// Fichier: pages/_app.js
```js
import { SessionProvider } from 'next-auth/react';
import '../styles/globals.css';

export default function App({ Component, pageProps: { session, ...pageProps } }) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  );
}
```

// Fichier: pages/index.js
```js
import Link from 'next/link';
import { getSession } from 'next-auth/react';

export default function Home({ session }) {
  return (
    <div className="container mx-auto p-4">
      {session ? (
        <Link href={`/profile/${session.user.id}`}>Voir mon profil</Link>
      ) : (
        <Link href="/api/auth/signin">Se connecter</Link>
      )}
    </div>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);
  return { props: { session } };
}
```

// Fichier: pages/api/auth/[...nextauth].js
```js
import NextAuth from 'next-auth';
import GoogleProvider from 'next-auth/providers/google';
import EmailProvider from 'next-auth/providers/email';
import { PrismaAdapter } from '@next-auth/prisma-adapter';
import prisma from '../../../lib/prisma';

export default NextAuth({
  adapter: PrismaAdapter(prisma),
  providers: [
    EmailProvider({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
    }),
  ],
  session: { strategy: 'jwt' },
  secret: process.env.NEXTAUTH_SECRET,
});
```

// Fichier: pages/profile/[id].js
```js
import { getSession } from 'next-auth/react';
import prisma from '../../lib/prisma';

export default function Profile({ user, collections }) {
  return (
    <div className="p-4 container mx-auto">
      <h1 className="text-2xl font-bold">
        Profil de {user.name || user.email}
      </h1>
      <ul className="grid grid-cols-3 gap-4 mt-4">
        {collections.map(c => (
          <li key={c.id} className="p-2 border rounded">
            <img src={c.figurine.imageRef} alt={c.figurine.name} />
            <p className="mt-2">{c.figurine.name}</p>
            <div className="mt-2">
              <img
                src={`/api/qrcode?data=${encodeURIComponent(
                  `https://emphasis.app/verify/${user.id}/${c.figurine.id}`
                )}`}
                alt="QR Code"
              />
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

export async function getServerSideProps({ params, req }) {
  const session = await getSession({ req });
  const user = await prisma.user.findUnique({ where: { id: params.id } });
  if (!user) return { notFound: true };
  const collections = await prisma.collection.findMany({
    where: { userId: user.id },
    include: { figurine: true },
  });
  return { props: { user, collections } };
}
```

// Fichier: pages/api/qrcode.js
```js
import QRCode from 'qrcode';

export default async function handler(req, res) {
  const { data } = req.query;
  try {
    const dataUrl = await QRCode.toDataURL(data);
    const img = Buffer.from(dataUrl.split(',')[1], 'base64');
    res.setHeader('Content-Type', 'image/png');
    res.send(img);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}
```

// Fichier: pages/verify/[userId]/[figurineId].js
```js
import { useRouter } from 'next/router';
import { useEffect, useRef, useState } from 'react';

export default function Verify() {
  const videoRef = useRef(null);
  const router = useRouter();
  const { userId, figurineId } = router.query;

  useEffect(() => {
    if (!videoRef.current) return;
    navigator.mediaDevices
      .getUserMedia({ video: true })
      .then(s => {
        videoRef.current.srcObject = s;
      })
      .catch(console.error);
  }, [videoRef]);

  const takePhoto = async () => {
    if (!videoRef.current) return;
    const canvas = document.createElement('canvas');
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    canvas.getContext('2d').drawImage(videoRef.current, 0, 0);
    canvas.toBlob(async blob => {
      const fd = new FormData();
      fd.append('file', blob, 'proof.png');
      const res = await fetch(
        `/api/collections/${userId}/${figurineId}/upload`,
        { method: 'POST', body: fd }
      );
      if (res.ok) alert('Preuve uploadée !');
    });
  };

  return (
    <div className="p-4">
      <h1>Vérification de possession</h1>
      <video ref={videoRef} autoPlay playsInline className="border rounded" />
      <button
        onClick={takePhoto}
        className="mt-2 p-2 bg-blue-600 text-white rounded"
      >
        Prendre une photo
      </button>
    </div>
  );
}
```

// Fichier: pages/api/collections/[userId]/[figurineId]/upload.js
```js
import formidable from 'formidable';
import prisma from '../../../../../lib/prisma';
import { uploadToStorage } from '../../../../../lib/storage';

export const config = { api: { bodyParser: false } };

export default async function handler(req, res) {
  const form = new formidable.IncomingForm();
  form.parse(req, async (err, fields, files) => {
    if (err) return res.status(500).json({ error: err.message });
    const file = files.file;
    try {
      const url = await uploadToStorage(
        file.filepath,
        file.originalFilename
      );
      const collection = await prisma.collection.findUnique({
        where: {
          userId_figurineId: {
            userId: fields.userId,
            figurineId: fields.figurineId,
          },
        },
      });
      const photo = await prisma.photoProof.create({
        data: { collectionId: collection.id, urlImage: url },
      });
      res.status(200).json(photo);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
}
```

// Fichier: lib/storage.js
```js
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import fs from 'fs';

const s3 = new S3Client({ region: process.env.AWS_REGION });

export async function uploadToStorage(path, filename) {
  const fileStream = fs.createReadStream(path);
  const key = `proofs/${Date.now()}_${filename}`;
  await s3.send(
    new PutObjectCommand({
      Bucket: process.env.S3_BUCKET,
      Key: key,
      Body: fileStream,
    })
  );
  return `https://${process.env.S3_BUCKET}.s3.amazonaws.com/${key}`;
}
```


