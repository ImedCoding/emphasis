generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  name        String?
  avatar      String?
  bio         String?
  country     String?
  accounts    Account[]
  sessions    Session[]
  collections Collection[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Figurine {
  id          String        @id @default(uuid())
  name        String
  collection  String
  series      String
  imageRef    String
  collections Collection[]
  @@unique([collection, series, name], name: "unique_figurine")
  @@index([collection, series])
}

model Collection {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  figurine     Figurine    @relation(fields: [figurineId], references: [id])
  figurineId   String
  qrCode       String
  qrToken      String?     @unique   // ⬅️ token de vérif à usage unique
  proofPhotos  PhotoProof[]
  verifiedAt   DateTime?
  createdAt    DateTime    @default(now())
  @@unique([userId, figurineId])
  @@index([userId, verifiedAt])      // pour tes listes “owned”
}

model PhotoProof {
  id           String      @id @default(uuid())
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  urlImage     String
  timestamp    DateTime    @default(now())
}